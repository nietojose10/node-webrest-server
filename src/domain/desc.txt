1.-Something important to highlight is that in domain we do not have any external library
2.-We will have pure code of the language that we are using.

Fernando's explanation:

Datasource vrs Repository
En este caso lucen igual pero tienen responsabilidades diferentes:

3.-El objetivo de la clase abstracta de un data source, es definir cómo llegaremos a esa fuente de datos
4.-El objetivo de la clase abstracta de un repositorio, es consumir ese data source.

"En este caso lucen igual pero tienen responsabilidades diferentes...

El objetivo de la clase abstracta de un data source, es definir cómo llegaremos a esa fuente de datos

El objetivo de la clase abstracta de un repositorio, es consumir ese data source.

¿Por qué son similares?

Porque queremos utilizar el repositorio para llegar a los métodos de las implementaciones del data source, pero usamos una implementación del repositorio porque así podemos cambiar el origen de datos fácilmente.

Piensa, qué pasa si en desarrollo, tu tienes una base de datos local, digamos SQLite, haces una clase que extienda del datasource abstracto, y ahí haces todo lo que necesites.

Luego al día de mañana, ya no usarás SQLite, usarás ISAR o un API a un backend, entonces creas otra clase que extienda de ese datasource abstracto.

Si lo haces así, y llamas el data source desde tu repositorio, puedes cambiar de origen de datos sin tener que tocar una sola línea de código de tus implementaciones.

Recuerda que el repositorio llama un data source, y puedes cambiarlo fácilmente. aquí aplicamos el principio de inversión de dependencias

https://en.wikipedia.org/wiki/Dependency_inversion_principle"